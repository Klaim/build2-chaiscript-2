int_libs = # Interface dependencies.
imp_libs = # Implementation dependencies.


# workaround msvc preprocessor issue: https://lists.build2.org/archives/users/2018-March/000290.html
if( $cxx.id == 'msvc' )
    obj{*} : cc.reprocess = true

root_dir = $src_base/source-chaiscript
include_dir = $root_dir/include
source_dir = $root_dir/src
staticlibs_dir = $root_dir/static_libs
headers = {hxx}{$include_dir/**}

./ : exe{chai} liba{chaiscript_parser chaiscript_stdlib}

cc.poptions =+ "-I$include_dir"

exe{chai} : cxx{$source_dir/main} liba{chaiscript_parser chaiscript_stdlib}

liba{chaiscript_parser} : {hxx cxx}{$staticlibs_dir/chaiscript_parser}
liba{chaiscript_stdlib} : {hxx cxx}{$staticlibs_dir/chaiscript_stdlib}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
hxx{version}: dist  = true
hxx{version}: clean = ($src_root != $out_root)

cxx.poptions =+ "-I$out_root" "-I$src_root"
liba{chaiscript_stdlib}: cxx.export.poptions = "-I$out_root" "-I$src_root"

# liba{chaiscript_stdlib}: cxx.export.poptions += -DLIBCHAISCRIPT_STATIC
# libs{chaiscript_stdlib}: cxx.export.poptions += -DLIBCHAISCRIPT_SHARED
#
# obja{*}: cxx.poptions += -DLIBCHAISCRIPT_STATIC_BUILD
# objs{*}: cxx.poptions += -DLIBCHAISCRIPT_SHARED_BUILD

# liba{chaiscript_stdlib}: cxx.export.libs = $int_libs

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version.
#
# if $version.pre_release
#   lib{chaiscript_stdlib}: bin.lib.version = @"-$version.project_id"
# else
#   lib{chaiscript_stdlib}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libchaiscript/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}: install         = $include_dir #include/$project/
{hxx ixx txx}{*}: install.subdirs = true
